{"students": [{"student_id": "correct", "source": "N/A", "email": "cem", "student_number": "1111111111", "section": "N/A", "last": "cl", "first": "cf"}], "assignment": "E2", "results": {"E2.e2tester.GraphTest": {"passes": {"testAddEdgeNode2NotInGraph": "the addEdge(Node<T> node1, Node<T> node2) method", "testReflectionMethodGetNumEdges": "the getNumEdges() method", "testReflectionMethodGetNeighbours": "the getNeighbours(Node<T> node) method", "testAreAdjacentNode1NotInGraph": "the areAdjacent(Node<T> node1, Node<T> node2) method", "testConstructer": "the Graph constructor", "testReflectionMethodAddNode": "the addNode(int id, T value) method", "testReflectionMethodGetNodes": "the getNodes() method", "testGetNodeNotInGraph": "the getNode(int id) method", "testAddEdgeIDNoNodesInGraph": "the addEdge(int id1, int id2) method", "testGraphMultipleNodesByNode": "a Graph with multiple Nodes", "testAreAdjacentID2NotInGraph": "the areAdjacent(int id1, int id2) method", "testGraphMultipleNodesByID": "a Graph with several Nodes", "testAreAdjacentNode2NotInGraph": "the areAdjacent(Node<T> node1, Node<T> node2) method", "testReflectionMethodGetNumNodes": "the getNumNodes() method", "testAddEdgeID2NotInGraph": "the addEdge(int id1, int id2) method", "testReflectionMethodAreAdjacentNode": "the areAdjacent(Node<T> node1, Node<T> node2) method", "testAddEdgeNode1NotInGraph": "the addEdge(Node<T> node1, Node<T> node2) method", "testAddEdgeNodeNoNodesInGraph": "the addEdge(Node<T> node1, Node<T> node2) method", "testReflectionMethodToString": "the toString() method", "testReflectionMethodAddEdgeNode": "the addEdge(Node<T> node1, Node<T> node2) method", "testAreAdjacentNodeNoNodesInGraph": "the areAdjacent(Node<T> node1, Node<T> node2) method", "testAreAdjacentID1NotInGraph": "the areAdjacent(int id1, int id2) method", "testReflectionMethodAreAdjacentId": "the areAdjacent(int id1, int id2) method", "testAddEdgeID1NotInGraph": "the addEdge(int id1, int id2) method", "testAreAdjacentIDNoNodesInGraph": "the areAdjacent(int id1, int id2) method", "testGetNodesOnNewGraph": "a Graph with no Nodes", "testReflectionMethodAddEdgeId": "the addEdge(int id1, int id2) method", "testReflectionMethodGetNode": "the getNode(int id) method"}, "failures": {"testGraphOneNode": {"description": "a Graph with a single Node", "message": "no self edges are allowed", "details": "java.lang.AssertionError: no self edges are allowed\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat E2.e2tester.GraphTest.testGraphOneNode(GraphTest.java:212)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.lang.Thread.run(Thread.java:745)\n"}}, "errors": {}}, "E2.e2tester.NoSuchNodeExceptionTest": {"passes": {"testIsCheckedException": "that NoSuchNodeException is a checked exception", "testConstructorNoArgs": "the NoSuchNodeException constructor with no arguments", "testConstructorOneArg": "the NoSuchNodeException constructor with one argument"}, "failures": {}, "errors": {}}}, "origin": "/home/anya/projects/at/u-of-t-autotester/uam/testjam/submissions/correct/E2", "date": "2015-07-21T12:34:14"}