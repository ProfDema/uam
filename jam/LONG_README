Last Updated: May 30, 2014

This README documents the use of the Java Automatic Marker (JAM) for testing
Java packages with JUnit tests as part of the larger 'Universal Automatic
Marker' (UAM).


1 INSTALLATION
If this is the first time that JAM is being used, or in the event that the JAM
source code has been changed, JAM will need to be compiled. Running the
compile_jam.sh script from the 'jam' directory will compile and create the
required 'jam.jar' file.

NOTE: compile_jam.sh takes no arguments


2 USAGE
Standard UAM usage involves the running of 'test_runner.py' file in the 'uam'
directory, with test specific settings in the 'config.py' file within the same
directory.

The default JAM specific configuration settings assume that the test suite/s
being used to test have already been compiled before 'test_runner.py' is run.

Example:
For the purposes of illustrating standard JAM usage, let us assume that we are
testing an Exercise, 'E1'

UAM is installed in:
/home/uamuser/uam/

JAM is installed in:
/home/uamuser/uam/jam

Our (not yet compiled) Test Suite is located within:
/home/uamuser/uam/jam/unittests/

Our Test Suite, AllTests.java and our test classes are in the E1tester package:
/home/uamuser/uam/jam/unittests/E1tester/AllTests.java
etc.

Our (also not yet compiled) students' submissions have been checked out in:
/home/uamuser/uam/submissions/

Our 'directories.txt' file, located at:
/home/uamuser/uam/directories.txt

contains a line for each submission directory, relative to the testing (uam)
directory, so its contents look like:
submissions/c2teston
submissions/c2testtw

and so on for all of our students.

Each student's source code must be located in a specific path under their
submission, in our example each submission directory contains:
E1/src/e1soln/Book.java

So, the absolute path to our students' submission source looks like:
/home/uamuser/uam/submissions/c2teston/E1/src/e1soln/Book.java
/home/uamuser/uam/submissions/c2testtw/E1/src/e1soln/Book.java

and so on for all of our students.


2.1 COMPILING TEST SUITES
Test suites can be compiled by running the compile_tests.sh script from the
'jam' directory, providing a path to the directory containing the test suite
to be compiled and a path to the directory containing the packages that the
test suite tests.

compile_tests.sh: Usage: ./compile_tests.sh testsuitedirectory packagedirectory

NOTE: The source files within the package directory do not need to be a fully
functional solution, they just need to be sufficient for the test suite to
compile (method stubs should be sufficient).

Example:
In our running example, our source files (which are just method stubs), are
located at:
/home/uamuser/uam/jam/solution/

So, from the JAM installation directory we run:
./compile_tests.sh unittests/E1tester solution

Alternatively, using absolute paths:
./compile_tests.sh /home/uamuser/uam/jam/unittests/E1tester /home/uamuser/uam/jam/solution


2.2 JAM SPECIFIC CONFIGURATION SETTINGS
Several variables within the 'config.py' file in the 'uam' directory are
specific to using JAM:

'uamdirectory' provides an absolute path to the 'uam' directory, used to write
to the log file

'jamdirectory' provides an absolute path to the 'jam' directory, used to create
absolute paths to the default locations for the libraries used by jam (and the
jam.lib library once JAM is compiled), unittests directory and the
exceptionExplanations.xml file

'jamsubmissionsource' provides a path from the submission directory provided
in 'directories.txt' (or a similar file used by 'test_runner.py'), to the
directory containing the packages being tested (usually projectname/src/ if
generated by Eclipse).

'exceptionexplanations' provides a path to the exception explanation XML file
that provides explanations for specific exceptions that can be modified without
requiring JAM to be recompiled.

'jamlibs' provides a path to the jam/lib directory files.

'jamtests' provides a path to the directory containing the package of the test
suite being used.

'jamtestsuite' refers directly to the test suite, within its package. This is
relative to 'jamtests'

'jampathtolog' provides a path to a log file for the recording of
compile-time errors for every submission being tested.


2.2.1 DEFAULT (EXAMPLE) JAM SPECIFIC CONFIGURATION SETTINGS
These are the default settings for all JAM specific variables in 'config.py'
for testing the provided example (NOT the running example in this README):

uamdirectory and jamdirectory are absolute paths to your uam and jam
installation directories respectively.

jamsubmissionsource = "Example/src/"

exceptionexplanations = jamdirectory + "exceptionExplanations.xml"

jamlibs = jamdirectory + "lib/*"

jamtests = jamdirectory + "unittests/"

jamtestsuite = "Example.AllTests"

jampathtolog = uamdirectory + "runlog.txt"

Example:
In our running example we would change the variables' values in config.py to:
uamdirectory = "/home/uamuser/uam/"
jamdirectory = "/home/uamuser/uam/jam/"
jamsubmissionsource = "E1/src/"
exceptionexplanations = jamdirectory + "exceptionExplanations.xml"
jamlibs = jamdirectory + "lib/*"
jamtests = jamdirectory + "unittests/"
jamtestsuite = "E1tester.AllTests"
jampathtolog = uamdirectory + "runlog.txt"

Or, using absolute paths instead of the uamdirectory and jamdirectory variables:
jamsubmissionsource = "E1/src/"
exceptionexplanations = "/home/uamuser/uam/jam/exceptionExplanations.xml"
jamlibs = "/home/uamuser/uam/jam/lib/*"
jamtests = "/home/uamuser/uam/jam/unittests/"
jamtestsuite = "E1tester.AllTests"
jampathtolog = "/home/uamuser/uam/runlog.txt"

Once the JAM specific variables are configured, the test_cmd variable must
also be set for UAM to run using JAM. The JAM specific setting for test_cmd is
as follows (on one line):
test_cmd = ["cd " + jamsubmissionsource + " && javac `find -L . | grep -v '\.svn' | grep '\.java'` > error.txt 2>&1; java -cp " + jamlibs + ":" + jamtests + ":. org.junit.runner.JAMCore " + jamtestsuite + " " + exceptionexplanations + " >> " + jampathtolog + " 2>&1", "cd " + jamsubmissionsource + " && echo \"`date`\nContents of error.txt in `pwd`:\n`cat error.txt`\n\" >> " + jampathtolog]

In our running example, once this is changed, we would run UAM from the UAM
installation directory by running
python3.3 test_runner.py


3 ADDING OR CHANGING EXCEPTION EXPLANATIONS
Existing exception explanations can be modified by adjusting the exception's
explanation field in the exceptionExplanation.xml found in the 'jam' directory.

To add a custom explanation to an exception that does not currently have one,
add a new exception to the XML file with the full class name of the exception
and a custom explanation.

If you would like to add a general explanation for any (and all) exceptions that
are not specified in the XML, edit the value of the 'DEFAULTEXPLANATION' String
constant in the ExceptionExplainer Class.

Example:
In our running example, the ExceptionExplainer class is located at:
/home/uamuser/uam/jam/src/edu/toronto/cs/jam/explanations/ExceptionExplainer.java

JAM will need to be recompiled for changes to the default explanation to take
effect.

If you are using a default explanation, but you would like some exceptions to
not have an explanation (general or specific), add an exception to the XML file
with the name of the exception but no explanation.

Specific exception explanations are read from the XML and stored in a HashMap,
with the full class name of the exception used as the key, and the explanation
as the value.

Example:
In our running example, we want to add a specific explanation for AssertionError
Exceptions, specifically the java.lang.AssertionError Exception we would add
the following lines within the <exceptions> element:
<exception>
  <name>java.lang.AssertionError</name>
  <explanation>Our Explanation of what may cause an AssertionError</explanation>
</exception>

NOTE: JAM currently already has an explanation for java.lang.AssertionError
      Exceptions, so changing the current explanation only requires editing
      that specific exception's explanation element in the XML.


4 CHANGING THE JSON OUTPUT
NOTE: This involves modifying the JAM source code, any such changes will require
      JAM to be recompiled before they take effect.

The contents of the JSON object that is output by JAM are generated by the
JSonOutputListener class.

Example:
In our running example, the JSonOutputListener class can be found at:
/home/uamuser/uam/jam/src/edu/toronto/cs/jam/reporters/JSonOutputListener.java

The JSonOutputListener class uses version 2.3.1 of the Gson library to generate
JSON formatted output, sourced from Google Code at:
https://code.google.com/p/google-gson/

NOTE: Google Code is shutting down and Gson is now on GitHub:
https://github.com/google/gson


5 CHANGING THE FORMAT OF FAILED TEST MESSAGES
The general format and wording of the message returned with each failed test is
generated by the generateCompleteFailureMessage(Failure) method of the
JSonOutputListener class.
